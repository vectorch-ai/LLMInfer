// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: chat.proto

package scalellm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the role of the messages author. One of "system", "user", "assistant".
	Role *string `protobuf:"bytes,1,opt,name=role,proto3,oneof" json:"role,omitempty"`
	// the content of the message. null for assistant messages with function calls.
	Content *string `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *ChatMessage) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *ChatMessage) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

// Next Id: 24
type ChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the model to use. You can use the ListModels endpoint to list available models.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// A list of messages comprising the conversation so far.
	Messages []*ChatMessage `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	// the maximum number of tokens to generate in the chat completion. default = 16
	MaxTokens *uint32 `protobuf:"varint,10,opt,name=max_tokens,json=maxTokens,proto3,oneof" json:"max_tokens,omitempty"`
	// number of chat completion choices to generate for each input message. default = 1
	N *uint32 `protobuf:"varint,7,opt,name=n,proto3,oneof" json:"n,omitempty"`
	// whether to stream partial completions back as they are generated. default = false
	Stream *bool `protobuf:"varint,8,opt,name=stream,proto3,oneof" json:"stream,omitempty"`
	// options for streaming response. Only set this when you set stream: true
	StreamOptions *StreamOptions `protobuf:"bytes,23,opt,name=stream_options,json=streamOptions,proto3,oneof" json:"stream_options,omitempty"`
	// temperature of the sampling, between [0, 2]. default = 1.0
	// higher value will make the ouput more random, while a lower value will make it more deterministic.
	// it is recommended altering this or top_p but not both.
	Temperature *float32 `protobuf:"fixed32,5,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// values between [-2.0, 2.0]. default = 0.0
	// Positive values penalize new tokens based on their existing in the text so far, increasing
	// the model's likelihood to talk about new topics.
	PresencePenalty *float32 `protobuf:"fixed32,11,opt,name=presence_penalty,json=presencePenalty,proto3,oneof" json:"presence_penalty,omitempty"`
	// values between [0.0, 2.0]. default = 0.0
	// Positive values penalize new tokens based on their existing frequency in the text so far,
	// decreasing the model's likelihood to repeat the same line verbatim.
	FrequencyPenalty *float32 `protobuf:"fixed32,12,opt,name=frequency_penalty,json=frequencyPenalty,proto3,oneof" json:"frequency_penalty,omitempty"`
	// repetition penalty to penalize new tokens based on their occurence in the
	// text. values > 1.0 encourage the model to use new tokens, while values
	// < 1.0 encourage the model to repeat tokens. default = 1.0
	RepetitionPenalty *float32 `protobuf:"fixed32,17,opt,name=repetition_penalty,json=repetitionPenalty,proto3,oneof" json:"repetition_penalty,omitempty"`
	// top_p sampling cutoff, between [0, 1.0]. default = 1.0
	TopP *float32 `protobuf:"fixed32,6,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`
	// top_k sampling cutoff, default = -1 (no cutoff)
	TopK *int64 `protobuf:"varint,18,opt,name=top_k,json=topK,proto3,oneof" json:"top_k,omitempty"`
	// whether to include the log probabilities of output tokens in the response. default = false
	Logprobs *bool `protobuf:"varint,21,opt,name=logprobs,proto3,oneof" json:"logprobs,omitempty"`
	// the number of log probabilities to include in the response, between [0, 20]. default = 0
	TopLogprobs *int32 `protobuf:"varint,22,opt,name=top_logprobs,json=topLogprobs,proto3,oneof" json:"top_logprobs,omitempty"`
	// A unique identifier representing your end-user, which can help system to monitor and detect abuse.
	User string `protobuf:"bytes,14,opt,name=user,proto3" json:"user,omitempty"`
	// whether to skip special tokens in the output. default = true
	SkipSpecialTokens *bool `protobuf:"varint,19,opt,name=skip_special_tokens,json=skipSpecialTokens,proto3,oneof" json:"skip_special_tokens,omitempty"`
	// whether to ignore the end of sequence token. default = false.
	IgnoreEos *bool `protobuf:"varint,20,opt,name=ignore_eos,json=ignoreEos,proto3,oneof" json:"ignore_eos,omitempty"`
	// up to 4 sequences where the API will stop generating further tokens.
	Stop []string `protobuf:"bytes,9,rep,name=stop,proto3" json:"stop,omitempty"`
	// the list of token ids where the API will stop generating further tokens.
	StopTokenIds []int32 `protobuf:"varint,16,rep,packed,name=stop_token_ids,json=stopTokenIds,proto3" json:"stop_token_ids,omitempty"`
	// request priority. default = DEFAULT
	Priority *Priority `protobuf:"varint,15,opt,name=priority,proto3,enum=llm.proto.Priority,oneof" json:"priority,omitempty"`
}

func (x *ChatRequest) Reset() {
	*x = ChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRequest) ProtoMessage() {}

func (x *ChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRequest.ProtoReflect.Descriptor instead.
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *ChatRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatRequest) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ChatRequest) GetMaxTokens() uint32 {
	if x != nil && x.MaxTokens != nil {
		return *x.MaxTokens
	}
	return 0
}

func (x *ChatRequest) GetN() uint32 {
	if x != nil && x.N != nil {
		return *x.N
	}
	return 0
}

func (x *ChatRequest) GetStream() bool {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return false
}

func (x *ChatRequest) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

func (x *ChatRequest) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *ChatRequest) GetPresencePenalty() float32 {
	if x != nil && x.PresencePenalty != nil {
		return *x.PresencePenalty
	}
	return 0
}

func (x *ChatRequest) GetFrequencyPenalty() float32 {
	if x != nil && x.FrequencyPenalty != nil {
		return *x.FrequencyPenalty
	}
	return 0
}

func (x *ChatRequest) GetRepetitionPenalty() float32 {
	if x != nil && x.RepetitionPenalty != nil {
		return *x.RepetitionPenalty
	}
	return 0
}

func (x *ChatRequest) GetTopP() float32 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *ChatRequest) GetTopK() int64 {
	if x != nil && x.TopK != nil {
		return *x.TopK
	}
	return 0
}

func (x *ChatRequest) GetLogprobs() bool {
	if x != nil && x.Logprobs != nil {
		return *x.Logprobs
	}
	return false
}

func (x *ChatRequest) GetTopLogprobs() int32 {
	if x != nil && x.TopLogprobs != nil {
		return *x.TopLogprobs
	}
	return 0
}

func (x *ChatRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ChatRequest) GetSkipSpecialTokens() bool {
	if x != nil && x.SkipSpecialTokens != nil {
		return *x.SkipSpecialTokens
	}
	return false
}

func (x *ChatRequest) GetIgnoreEos() bool {
	if x != nil && x.IgnoreEos != nil {
		return *x.IgnoreEos
	}
	return false
}

func (x *ChatRequest) GetStop() []string {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ChatRequest) GetStopTokenIds() []int32 {
	if x != nil {
		return x.StopTokenIds
	}
	return nil
}

func (x *ChatRequest) GetPriority() Priority {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return Priority_DEFAULT
}

type ChatLogProbData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token
	Token *string `protobuf:"bytes,1,opt,name=token,proto3,oneof" json:"token,omitempty"`
	// the token id.
	TokenId *int32 `protobuf:"varint,2,opt,name=token_id,proto3,oneof" json:"token_id,omitempty"`
	// the log probability of the token.
	Logprob *float32 `protobuf:"fixed32,3,opt,name=logprob,proto3,oneof" json:"logprob,omitempty"`
}

func (x *ChatLogProbData) Reset() {
	*x = ChatLogProbData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatLogProbData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatLogProbData) ProtoMessage() {}

func (x *ChatLogProbData) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatLogProbData.ProtoReflect.Descriptor instead.
func (*ChatLogProbData) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *ChatLogProbData) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *ChatLogProbData) GetTokenId() int32 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *ChatLogProbData) GetLogprob() float32 {
	if x != nil && x.Logprob != nil {
		return *x.Logprob
	}
	return 0
}

type ChatLogProb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token
	Token *string `protobuf:"bytes,1,opt,name=token,proto3,oneof" json:"token,omitempty"`
	// the token id.
	TokenId *int32 `protobuf:"varint,2,opt,name=token_id,proto3,oneof" json:"token_id,omitempty"`
	// the log probability of the token.
	Logprob *float32 `protobuf:"fixed32,3,opt,name=logprob,proto3,oneof" json:"logprob,omitempty"`
	// the log probability of top tokens.
	TopLogprobs []*ChatLogProbData `protobuf:"bytes,5,rep,name=top_logprobs,proto3" json:"top_logprobs,omitempty"`
}

func (x *ChatLogProb) Reset() {
	*x = ChatLogProb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatLogProb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatLogProb) ProtoMessage() {}

func (x *ChatLogProb) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatLogProb.ProtoReflect.Descriptor instead.
func (*ChatLogProb) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *ChatLogProb) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *ChatLogProb) GetTokenId() int32 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *ChatLogProb) GetLogprob() float32 {
	if x != nil && x.Logprob != nil {
		return *x.Logprob
	}
	return 0
}

func (x *ChatLogProb) GetTopLogprobs() []*ChatLogProbData {
	if x != nil {
		return x.TopLogprobs
	}
	return nil
}

type ChatLogProbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []*ChatLogProb `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *ChatLogProbs) Reset() {
	*x = ChatLogProbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatLogProbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatLogProbs) ProtoMessage() {}

func (x *ChatLogProbs) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatLogProbs.ProtoReflect.Descriptor instead.
func (*ChatLogProbs) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *ChatLogProbs) GetContent() []*ChatLogProb {
	if x != nil {
		return x.Content
	}
	return nil
}

type ChatChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the index of the choice in the list of choices.
	Index *uint32 `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// A chat completion delta generated by streamed model responses.
	Delta *ChatMessage `protobuf:"bytes,2,opt,name=delta,proto3,oneof" json:"delta,omitempty"`
	// the message generated by the model.
	Message *ChatMessage `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// the reason of the model stoped generating tokens.
	// "stop" - the model hit a natural stop point or a provided stop sequence.
	// "length" - the maximum number of tokens specified in the request was reached.
	// "function_call" - the model called a function.
	FinishReason *string `protobuf:"bytes,4,opt,name=finish_reason,proto3,oneof" json:"finish_reason,omitempty"`
	// the log probabilities of output tokens.
	Logprobs *ChatLogProbs `protobuf:"bytes,5,opt,name=logprobs,proto3,oneof" json:"logprobs,omitempty"`
}

func (x *ChatChoice) Reset() {
	*x = ChatChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatChoice) ProtoMessage() {}

func (x *ChatChoice) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatChoice.ProtoReflect.Descriptor instead.
func (*ChatChoice) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *ChatChoice) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ChatChoice) GetDelta() *ChatMessage {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *ChatChoice) GetMessage() *ChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChatChoice) GetFinishReason() string {
	if x != nil && x.FinishReason != nil {
		return *x.FinishReason
	}
	return ""
}

func (x *ChatChoice) GetLogprobs() *ChatLogProbs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

type ChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id for the chat completion.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the object type, which is always "chat.completion[.chunk]".
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// the unix timestamp (in seconds) of when the chat completion was created.
	Created uint32 `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	// the model used for the completion
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// list of generated completion choices for the input prompt
	Choices []*ChatChoice `protobuf:"bytes,5,rep,name=choices,proto3" json:"choices,omitempty"`
	// usage statistics for the completion request.
	Usage *Usage `protobuf:"bytes,6,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *ChatResponse) Reset() {
	*x = ChatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResponse) ProtoMessage() {}

func (x *ChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResponse.ProtoReflect.Descriptor instead.
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

func (x *ChatResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ChatResponse) GetCreated() uint32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ChatResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatResponse) GetChoices() []*ChatChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ChatResponse) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6c, 0x6c,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xf3, 0x07, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x11, 0x0a, 0x01, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x01, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x12, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x11, 0x72, 0x65,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x08, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x04, 0x74,
	0x6f, 0x70, 0x4b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x6c,
	0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52,
	0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0c, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x65, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x09,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x48, 0x0e, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x5f,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6f, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74,
	0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6c, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x22, 0x40, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6c, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x6f, 0x62, 0x73, 0x48, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62,
	0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x6c,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6c, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x47, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x63, 0x68, 0x2d, 0x61, 0x69, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6c, 0x6c, 0x6d, 0x3b,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x6c, 0x6c, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_chat_proto_goTypes = []interface{}{
	(*ChatMessage)(nil),     // 0: llm.proto.ChatMessage
	(*ChatRequest)(nil),     // 1: llm.proto.ChatRequest
	(*ChatLogProbData)(nil), // 2: llm.proto.ChatLogProbData
	(*ChatLogProb)(nil),     // 3: llm.proto.ChatLogProb
	(*ChatLogProbs)(nil),    // 4: llm.proto.ChatLogProbs
	(*ChatChoice)(nil),      // 5: llm.proto.ChatChoice
	(*ChatResponse)(nil),    // 6: llm.proto.ChatResponse
	(*StreamOptions)(nil),   // 7: llm.proto.StreamOptions
	(Priority)(0),           // 8: llm.proto.Priority
	(*Usage)(nil),           // 9: llm.proto.Usage
}
var file_chat_proto_depIdxs = []int32{
	0,  // 0: llm.proto.ChatRequest.messages:type_name -> llm.proto.ChatMessage
	7,  // 1: llm.proto.ChatRequest.stream_options:type_name -> llm.proto.StreamOptions
	8,  // 2: llm.proto.ChatRequest.priority:type_name -> llm.proto.Priority
	2,  // 3: llm.proto.ChatLogProb.top_logprobs:type_name -> llm.proto.ChatLogProbData
	3,  // 4: llm.proto.ChatLogProbs.content:type_name -> llm.proto.ChatLogProb
	0,  // 5: llm.proto.ChatChoice.delta:type_name -> llm.proto.ChatMessage
	0,  // 6: llm.proto.ChatChoice.message:type_name -> llm.proto.ChatMessage
	4,  // 7: llm.proto.ChatChoice.logprobs:type_name -> llm.proto.ChatLogProbs
	5,  // 8: llm.proto.ChatResponse.choices:type_name -> llm.proto.ChatChoice
	9,  // 9: llm.proto.ChatResponse.usage:type_name -> llm.proto.Usage
	1,  // 10: llm.proto.Chat.Complete:input_type -> llm.proto.ChatRequest
	6,  // 11: llm.proto.Chat.Complete:output_type -> llm.proto.ChatResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatLogProbData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatLogProb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatLogProbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chat_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_chat_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_chat_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_chat_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_chat_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
