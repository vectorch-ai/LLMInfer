name: Package test

on:
  workflow_dispatch:

  # Schedule the workflow to run at 08:00 (UTC) every day.
  schedule:
    # Minute[0,59] Hour[0,23] Day of month[1,31] Month[1,12] Day of week[0,6] (Sunday=0)
    - cron: '0 8 * * *'  

  push:
    paths:
      - "scalellm/**"
      - "tests/**"
      - "setup.py"
      - "requirements.txt"
      - "requirements-test.txt"
      - ".github/workflows/package_test.yml"
    branches: 
      - main

  pull_request:
    paths:
      - "scalellm/**"
      - "tests/**"
      - "setup.py"
      - "requirements.txt"
      - "requirements-test.txt"
      - ".github/workflows/package_test.yml"
    branches:
      - main
env:
  # Tells where to store caches.
  CI_CACHE_DIR: ${{ github.workspace }}/../../ci_cache

# cancel all previous runs if a new one is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test-wheel:
    strategy:
      fail-fast: false
      matrix:
        torch: ["2.4.1"]
    runs-on: [self-hosted, linux, build]
    env:
      TORCH_VERSION: ${{ matrix.torch }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Create cache directory
      run: |
        mkdir -p $CI_CACHE_DIR/.vcpkg/bincache
        mkdir -p $CI_CACHE_DIR/.ccache
        mkdir -p $CI_CACHE_DIR/.pip
      
    - name: Build wheel
      timeout-minutes: 60
      run: |
        # extract python version
        PYTHON_VERSION=$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
        # extract cuda version
        CUDA_VERSION=$(nvcc --version | grep "Cuda compilation tools" | cut -d ' ' -f 5 | cut -d ',' -f 1)
        printf "Python version: ${PYTHON_VERSION}\n"
        printf "CUDA version: ${CUDA_VERSION}\n"
        docker pull vectorchai/scalellm_manylinux:cuda${CUDA_VERSION}
        docker run --rm -t \
            -v "$CI_CACHE_DIR":/ci_cache \
            -v "$GITHUB_WORKSPACE":/ScaleLLM \
            -e PYTHON_VERSION=${PYTHON_VERSION} \
            -e CUDA_VERSION=${CUDA_VERSION} \
            -e TORCH_VERSION=${TORCH_VERSION} \
            -e VCPKG_DEFAULT_BINARY_CACHE=/ci_cache/.vcpkg/bincache \
            -e CCACHE_DIR=/ci_cache/.ccache \
            -e PIP_CACHE_DIR=/ci_cache/.pip \
            -u $(id -u):$(id -g) \
            vectorchai/scalellm_manylinux:cuda${CUDA_VERSION} \
            bash /ScaleLLM/scripts/build_wheel.sh

    - name: Show whl package size
      run: du -h dist/*

    - name: Install the package and run pytest
      timeout-minutes: 10
      shell: bash -l {0}
      run: |
        # install the wheel package
        # sudo apt install python3-venv

        # extract cuda version
        CUDA_VERSION=$(nvcc --version | grep "Cuda compilation tools" | cut -d ' ' -f 5 | cut -d ',' -f 1)

        # Create and activate a virtual environment
        python3 -m venv .venv
        source .venv/bin/activate

        # Install PyTorch
        pip install torch==${TORCH_VERSION} -i "https://download.pytorch.org/whl/cu${CUDA_VERSION//./}"

        # Install the wheel package
        pip install dist/*.whl

        # Install the test requirements
        pip install -r requirements-test.txt
        
        # Run pytest
        printf "\n\nRunning pytest\n\n"
        cd tests
        python3 -m pytest || exit 1
        printf "\n\n"

        # Deactivate the virtual environment
        deactivate
